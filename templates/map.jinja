
<!DOCTYPE html>
<html>
<head>
	
	<title>RAITO LIGHTNING NETWORK MAP [TESTNET]</title>

	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==" crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js" integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==" crossorigin=""></script>

	<link rel="stylesheet" href="/static/Leaflet.ExtraMarkers/dist/css/leaflet.extra-markers.min.css">
	<script src="/static/Leaflet.ExtraMarkers/dist/js/leaflet.extra-markers.min.js"></script>
	<style>
		html, body {
			height: 100%;
			margin: 0;
		}
		#map {
			width: 100%;
			height: 100%;
		}
	</style>
</head>
<body>

<div id='map'></div>

<script>
	var cities = L.layerGroup();

    var local_icons = {
        type: 'div',
        iconSize: [230, 0],
        html: 'Using <strong>Bold text as an icon</strong>: Lisbon',
        popupAnchor:  [0, 0]
    };

	var mbAttr = 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
			'<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
			'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
		mbUrl = 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';

	var grayscale   = L.tileLayer(mbUrl, {id: 'mapbox.light', attribution: mbAttr}),
		streets  = L.tileLayer(mbUrl, {id: 'mapbox.streets',   attribution: mbAttr});

	window.onload = function() {
	  var startPos;
	  var geoSuccess = function(position) {
	    startPos = position;
	
		var map = L.map('map', {
			center: [startPos.coords.latitude, startPos.coords.longitude],
			zoom: 3,
			layers: [grayscale, cities, ],
		    maxBounds: [
		        [-85.0, -180.0],
		        [85.0, 180.0]
		    ]
		});
		
			
		
		{% for channel in channel_list %}
			{% if (channel.source_node and channel.source_node.get_address_count() > 0) and (channel.destination_node and channel.destination_node.get_address_count() > 0) %}
				{% for address in channel.source_node.get_address_list()[:1] %}
					var pointA = new L.LatLng({{address.latitude}}, {{address.longitude}});
				{% endfor %}
				{% for address in channel.destination_node.get_address_list()[:1] %}
					var pointB = new L.LatLng({{address.latitude}}, {{address.longitude}});
				{% endfor %}
				var pointList = [pointA, pointB];

				var firstpolyline = new L.Polyline(pointList, {
				    color: '#{{channel.source_node.color}}',
				    weight: 2,
				    opacity: 0.5,
				    smoothFactor: 1
				});
				
				firstpolyline.addTo(map);
			{% endif %}
		{% endfor %}
		
		{% for node in node_list %}
			{% for address in node.get_address_list() %}
				// var red = '{{node.color}}';
				// var svg = '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"  width="320px" height="100px" viewBox="0 0 320 100" enable-background="new 0 0 320 100" xml:space="preserve"><circle class="mycircle" fill="#'+red+'" cx="13" cy="13" r="12"/></svg>';      
				// var encoded = window.btoa(svg);
				// var url = "url(data:image/svg+xml;base64,"+encoded+")";
				// console.log(url)
				var myIcon = L.icon({
				    iconUrl: '/point.svg?color={{node.color}}',
				    iconSize: [38, 95],
				});

				L.marker([{{address.latitude}}, {{address.longitude}}], { icon: myIcon, }).addTo(map);
				// L.marker([{{address.latitude}}, {{address.longitude}}]).bindPopup('{{node.get_name()}}').addTo(cities)
			{% endfor %}
		{% endfor %}
	  };
	  var geoError = function(position) {
	    console.log('Error occurred. Error code: ' + error.code);
	  };
	  navigator.geolocation.getCurrentPosition(geoSuccess, geoError);
	};

	var baseLayers = {
		"Grayscale": grayscale,
		"Streets": streets
	};

	var overlays = {
		"Cities": cities
	};

	L.control.layers(baseLayers, overlays).addTo(map);
</script>
</body>
</html>
